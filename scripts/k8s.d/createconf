#!/bin/bash
#
# Create conf file for initial K8s installation
#

sourceconf "$PLATFORM_CONF"
sourceconf "$CA_CONF"



DEF_K8S_VER="v1.12.4"
DEF_ETCD_VER="v3.3.6"
DEF_KUBECTL="./bin/kubectl"
DEF_CLUSTERNAME="myk8s"
DEF_CLUSTERBASE="mapr"
DEF_CLUSTER_DNS_IP="10.32.0.10"
DEF_REVERSE_CIDRS="in-addr.arpa ip6.arpa"
DEF_CLUSTER_DOMAIN="cluster.local"
DEF_ZETA_PROXY=""
DEF_ZETA_NOPROXY=""
DEF_CRI_PROV="docker"
DEF_CNI_PROV="calico"
DEF_K8S_CIDR_POD="10.244.0.0/16"
DEF_K8S_CIDR_SERVICE="10.32.0.0/24"
DEF_K8S_CIDR_CLUSTER="10.64.0.0/12"
DEF_K8S_PORT_START_SERVICE="30000"
DEF_K8S_PORT_END_SERVICE="32767"

function _k8screateconf() {

    UNATTEND="0"
    for i in "$@"
    do
    case $i in
        -u)
        UNATTEND="1"
        ;;
        "-kv="*)
        T_K8S_VER="${i#*=}"
        ;;
        "-ev="*)
        T_ETCD_VER="${i#*=}"
        ;;
        "-kc="*)
        T_KUBECTL="${i#*=}"
        ;;
        "-cn="*)
        T_CLUSTERNAME="${i#*=}"
        ;;
        "-cb="*)
        T_CLUSTERBASE="${i#*=}"
        ;;
        "-cdi="*)
        T_CLUSTER_DNS_IP="${i#*=}"
        ;;
        "-cd="*)
        T_CLUSTER_DOMAIN="${i#*=}"
        ;;
        "-zp="*)
        T_ZETA_PROXY="${i#*=}"
        ;;
        "-zn="*)
        T_ZETA_NOPROXY="${i#*=}"
        ;;
        "-cri="*)
        T_CRI_PROV="${i#*=}"
        ;;
        "-cni="*)
        T_CNI_PROV="${i#*=}"
        ;;
        "-kcp="*)
        T_K8S_CIDR_POD="${i#*=}"
        ;;
        "-kcs="*)
        T_K8S_CIDR_SERVICE="${i#*=}"
        ;;
        "-kcc="*)
        T_K8S_CIDR_CLUSTER="${i#*=}"
        ;;
        "-kpss="*)
        T_K8S_PORT_START_SERVICE="${i#*=}"
        ;;
        "-kpes="*)
        T_K8S_PORT_END_SERVICE="${i#*=}"
        ;;
        *)
    esac
    done


    echo ""
    echo "----------------------------"
    if [ "$UNATTEND" == "1" ]; then
        K8S_VER=${T_K8S_VER:-$DEF_K8S_VER}
        ETCD_VER=${T_ETCD_VER:-$DEF_ETCD_VER}
        KUBECTL=${T_KUBECTL:-$DEF_KUBECTL}
        CLUSTERNAME=${T_CLUSTERNAME:-$DEF_CLUSTERNAME}
        CLUSTERBASE=${T_CLUSTERBASE:-$DEF_CLUSTERBASE}

    else
        read -e -p "Please type the version of K8s you'd like to install: " -i "$DEF_K8S_VER" K8S_VER
        echo ""
        read -e -p "Please type the version of etcd you would like to use with kubernetes: " -i "$DEF_ETCD_VER" ETCD_VER
        echo ""
        read -e -p "Please enter the kubectl location (if it doesn't exist, we will download it" -i "$DEF_KUBECTL" KUBECTL
        echo ""
        read -e -p "Please enter your kubernetes cluster name: " -i "$DEF_CLUSTERNAME" CLUSTERNAME
        echo ""
        read -e -p "Please enter your cluster Mount point: " -i "$DEF_CLUSTERBASE" CLUSTERBASE
        echo ""

    fi
    echo "Your cluster base is: $CLUSTERBASE"
    echo "Your cluster name is: $CLUSTERNAME"
    CLUSTERMOUNT="/$CLUSTERBASE/$CLUSTERNAME"
    echo "Your cluster posix mount point is $CLUSTERMOUNT"
    echo ""

    if [ ! -f "$KUBECTL" ]; then
        @go.log WARN "Downloading kubectl version $K8S_VER"
        wget https://storage.googleapis.com/kubernetes-release/release/${K8S_VER}/bin/linux/amd64/kubectl
        mv kubectl $KUBECTL
        chmod +x $KUBECTL
    fi


    echo ""
    echo "-----------------------------------"
    echo "This process will ask a series of questions in order to create a k8s.conf script for gettings nodes ready for Zeta"
    echo "The configuration will be located: $K8S_CONF"
    echo "-----------------------------------"
    echo ""
    echo ""
    ret_init_inst "master" "MASTER_SPOT_INSTS"
    ret_init_inst "worker" "WORKER_SPOT_INSTS"

    if [ "$MASTER_SPOT_INSTS" == "" ]; then
        @go.log FATAL "No Master Nodes running exiting"
    fi
    if [ "$WORKER_SPOT_INSTS" == "" ]; then
        @go.log FATAL "No Worker Nodes running exiting"
    fi

    ret_init_ips "MASTER_INST_STR" "$MASTER_SPOT_INSTS" 1
    if [ "$MASTER_INST_STR" == "" ]; then
        @go.log FATAL "No output from master status: exiting"
    fi
    ret_init_ips "WORKER_INST_STR" "$WORKER_SPOT_INSTS" 1
    if [ "$WORKER_INST_STR" == "" ]; then
        @go.log FATAL "No output from worker status: exiting"
    fi
    MASTER_INST_STR=$(echo "$MASTER_INST_STR"|tr ";" " ")
    WORKER_INST_STR=$(echo "$WORKER_INST_STR"|tr ";" " ")

    echo "---------------------------------------------"
    echo ""
    MST=""
    ALL_NODES=""
    MASTER_NODES=""
    for INST in $MASTER_INST_STR; do
        INT_IP=$(echo "$INST"|cut -d"," -f3)
        EXT_IP=$(echo "$INST"|cut -d"," -f4)
        HNAME=$(echo "$INST"|cut -d"," -f5)
        if [ "$ALL_NODES" == "" ]; then
            ALL_NODES="$HNAME"
            ALL_NODES_EXT_IP="$EXT_IP"
            ALL_NODES_INT_IP="$INT_IP"
            MASTER_NODES="$HNAME"
            MASTER_NODES_EXT_IP="$EXT_IP"
            MASTER_NODES_INT_IP="$INT_IP"
        else
            ALL_NODES="${ALL_NODES},$HNAME"
            ALL_NODES_EXT_IP="$ALL_NODES_EXT_IP,$EXT_IP"
            ALL_NODES_INT_IP="$ALL_NODES_INT_IP,$INT_IP"
            MASTER_NODES="${MASTER_NODES},$HNAME"
            MASTER_NODES_EXT_IP="${MASTER_NODES_EXT_IP},$EXT_IP"
            MASTER_NODES_INT_IP="${MASTER_NODES_INT_IP},$INT_IP"
        fi
        echo "$HNAME   - $INST"
    done
    echo ""


    WORKER_NODES=""
    for INST in $WORKER_INST_STR; do
        HNAME=$(echo "$INST"|cut -d"," -f5)
        INT_IP=$(echo "$INST"|cut -d"," -f3)
        EXT_IP=$(echo "$INST"|cut -d"," -f4)
        T=$(echo "$MASTER_NODES"|grep "$HNAME")
        if [ "$T" == "" ]; then
            if [ "$WORKER_NODES" == "" ]; then
                WORKER_NODES="$HNAME"
                WORKER_NODES_EXT_IP="$EXT_IP"
                WORKER_NODES_INT_IP="$INT_IP"
                ALL_NODES="${ALL_NODES},$HNAME"
                ALL_NODES_EXT_IP="$ALL_NODES_EXT_IP,$EXT_IP"
                ALL_NODES_INT_IP="$ALL_NODES_INT_IP,$INT_IP"
            else
                WORKER_NODES="$WORKER_NODES,$HNAME"
                WORKER_NODES_EXT_IP="$WORKER_NODES_EXT_IP,$EXT_IP"
                WORKER_NODES_INT_IP="$WORKER_NODES_INT_IP,$INT_IP"
                ALL_NODES="${ALL_NODES},$HNAME"
                ALL_NODES_EXT_IP="$ALL_NODES_EXT_IP,$EXT_IP"
                ALL_NODES_INT_IP="$ALL_NODES_INT_IP,$INT_IP"
            fi
        fi
    done
    echo ""
    echo "---------------------------------------------"
    echo ""
    echo "DNS Resolution - Needs to be platform specfic"
    echo "This is needed for external DNS resolution, defaults are examples from an AWS region, please enure the resolve it correct for your installation"
    echo ""

    if [ "$UNATTEND" == "1" ]; then
        CLUSTER_DNS_IP=${T_CLUSTER_DNS_IP:-$DEF_CLUSTER_DNS_IP}
        DNS_UPSTREAM=${T_DNS_UPSTREAM:-$DEFAULT_DNS_UPSTREAM}
        REVERSE_CIDRS=${T_REVERSE_CIDRS:-$DEF_REVERSE_CIDRS}
        CLUSTER_DOMAIN=${T_CLUSTER_DOMAIN:-$DEF_CLUSTER_DOMAIN}
        ZETA_PROXY=${T_ZETA_PROXY:-$DEF_ZETA_PROXY}
        ZETA_NOPROXY=${T_ZETA_NOPROXY:-$DEF_ZETA_NOPROXY}
    else
        read -e -p "Please enter the service IP of the Cluster DNS Server: " -i "$DEF_CLUSTER_DNS_IP" CLUSTER_DNS_IP
        echo ""
        read -e -p "Please enter the upstream DNS of the Cluster (prov by platform) (This can be comma separated): " -i "$DEFAULT_UPSTREAM_DNS" UPSTREAM_DNS
        echo ""
        read -e -p "Please enter the reverse DNS cidrs: " -i "$DEF_REVERSE_CIDRS" REVERSE_CIDRS
        echo ""
        read -e -p "Please enter the name of the cluster domain: " -i "$DEF_CLUSTER_DOMAIN" CLUSTER_DOMAIN
        echo ""
        echo "Cluster proxies. If your cluster needs HTTP_PROXY information to connect to the Internet, now is the time to enter that"
        echo "We will ask for both Proxy information, as well as NOPROXY information"
        echo ""
        echo "---------------------------------------"
        echo "If you need to specify a HTTP_PROXY for docker building, please enter it here"
        echo "If this variable is filled, it will add the proxy lines to the docker files for building the images"
        echo ""
        read -p "Enter the proxy information (blank for none): " -i "$DEF_ZETA_PROXY" ZETA_PROXY
        echo ""
        echo "---------------------------------------"
        echo "If you need to specify a NO_PROXY string it's highly recommended. Use your subnets and internal domain names"
        echo "Example: \"192.168.0.0/16,mycompany.com\""
        echo ""
        read -p "Enter the noproxy information (blank for none): " -i "$DEF_ZETA_NOPROXY"ZETA_NOPROXY
        echo ""
    fi

    if [ "$DNS_UPSTREAM" == "" ]; then
        DNS_RESOLVERS="$CLUSTER_DNS_IP"
    else
        DNS_RESOLVERS="${CLUSTER_DNS_IP},${DNS_UPSTREAM}"
    fi
    DNS_SEARCH="${CLUSTER_DOMAIN}"



    if [ "$UNATTEND" == "1" ]; then
        CRI_PROV=${T_CRI_PROV:-$DEF_CRI_PROV}
        CNI_PROV=${T_CNI_PROV:-$DEF_CNI_PROV}

    else
        echo "---------------------------------------"
        echo ""
        echo "The following is the list of CRI (Container Runtime Interface) Providers included: Please select a provider:"
        echo ""
        PROV=$(ls -1 ./scripts/lib|grep "libcri")
        for P in $PROV; do
            echo "$P"|sed "s/libcri//"
        done
        echo ""
        read -e -p "Please enter a CRI Provider to use: " -i "$DEF_CRI_PROV" CRI_PROV
        echo ""
        echo "The following is the list of CNI (Container Network Interface) Providers included: Please select a provider:"
        echo ""
        PROV=$(ls -1 ./scripts/lib|grep "libcni")
        for P in $PROV; do
            echo "$P"|sed "s/libcni//"
        done
        echo ""
        read -e -p "Please enter a CNI Provider to use: " -i "$DEF_CNI_PROV" CNI_PROV
    fi
    K8S_CRI_PROV="libcri${CRI_PROV}"
    K8S_CRI_PROV_LOC="./scripts/lib/$K8S_CRI_PROV"

    if [ ! -f "${K8S_CRI_PROV_LOC}" ]; then
        echo "Cannot find $K8S_CRI_PROV_LOC: Exiting"
        exit 1
    fi
    K8S_CNI_PROV="libcni${CNI_PROV}"
    K8S_CNI_PROV_LOC="./script/lib/${K8S_CNI_PROV}"
    if [ ! -f "${K8S_CNI_PROV_LOC}" ]; then
        echo "Cannot find $K8S_CNI_PROV_LOC: Exiting"
        exit 1
    fi
############################################### IP and Port Stuff
    if [ "$UNATTEND" == "1" ]; then
        K8S_CIDR_POD=${T_K8S_CIDR_POD:-$DEF_K8S_CIDR_POD}
        K8S_CIDR_SERVICE=${T_K8S_CIDR_SERVICE:-$DEF_K8S_CIDR_SERVICE}
        K8S_CIDR_CLUSTER=${T_K8S_CIDR_CLUSTER:-$DEF_K8S_CIDR_CLUSTER}
        K8S_PORT_START_SERVICE=${T_K8S_PORT_START_SERVICE:-$DEF_K8S_PORT_START_SERVICE}
        K8S_PORT_END_SERVICE=${T_K8S_PORT_END_SERVICE:-$DEF_K8S_PORT_END_SERVICE}
    else
        echo ""
        read -e -p "Please enter pod network CIDR: " -i "${DEF_K8S_CIDR_POD}" K8S_CIDR_POD
        echo ""
        read -e -p "Please enter a service CIDR: " -i "${DEF_K8S_CIDR_SERVICE}" K8S_CIDR_SERVICE
        echo ""
        read -e -p "Please enter a cluster CIDR: " -i "${DEF_K8S_CIDR_CLUSTER}" K8S_CIDR_CLUSTER
        echo ""
        read -e -p "Please enter a service Port Start: " -i "$DEF_K8S_PORT_START_SERVICE" K8S_PORT_START_SERVICE
        echo ""
        read -e -p "Please enter a service Port End: " -i "$DEF_K8S_PORT_END_SERVICE" K8S_PORT_END_SERVICE
        echo ""
    fi

############################################### Download locations


    ETCD_BASE="https://github.com/coreos/etcd/releases/download/${ETCD_VER}"
    ETCD_FILE="etcd-${ETCD_VER}-linux-amd64.tar.gz"
    ETCD_URL="${ETCD_BASE}/${ETCD_FILE}"
    ETCD_DIR="etcd-${ETCD_VER}-linux-amd64"
    ETCD_STATUS_CMD="sudo ETCDCTL_API=3 etcdctl member list --endpoints=https://127.0.0.1:2379 --cacert=/opt/k8s/certs/ca.pem --cert=/opt/k8s/certs/kubernetes.pem --key=/opt/k8s/certs/kubernetes-key.pem"
    K8S_BASE="https://storage.googleapis.com/kubernetes-release/release/${K8S_VER}/bin/linux/amd64"

    K8S_DIR="/opt/k8s"
    K8S_BIN_DIR="${K8S_DIR}/bin/$K8S_VER"
    CNI_CONF_DIR="/opt/k8s/cni/net.d"
    CNI_BIN_DIR="/opt/k8s/cni/bin"

cat > $K8S_CONF << EOP
#!/bin/bash

#K8s layout
MASTER_NODES="$MASTER_NODES"
MASTER_NODES_EXT_IP="$MASTER_NODES_EXT_IP"
MASTER_NODES_INT_IP="$MASTER_NODES_INT_IP"

WORKER_NODES="$WORKER_NODES"
WORKER_NODES_EXT_IP="$WORKER_NODES_EXT_IP"
WORKER_NODES_INT_IP="$WORKER_NODES_INT_IP"

ALL_NODES="$ALL_NODES"
ALL_NODES_EXT_IP="$ALL_NODES_EXT_IP"
ALL_NODES_INT_IP="$ALL_NODES_INT_IP"

#EtcD Information
ETCD_VER="${ETCD_VER}"
ETCD_BASE="${ETCD_BASE}"
ETCD_FILE="${ETCD_FILE}"
ETCD_URL="${ETCD_URL}"
ETCD_DIR="${ETCD_DIR}"
ETCD_STATUS_CMD="${ETCD_STATUS_CMD}"

KUBECTL="$KUBECTL"

K8S_CIDR_POD="$K8S_CIDR_POD"
K8S_CIDR_SERVICE="$K8S_CIDR_SERVICE"
K8S_CIDR_CLUSTER="$K8S_CIDR_CLUSTER"
K8S_PORT_START_SERVICE="$K8S_PORT_START_SERVICE"
K8S_PORT_END_SERVICE="$K8S_PORT_END_SERVICE"

K8S_VER="${K8S_VER}"
K8S_BASE="${K8S_BASE}"
K8S_DIR="${K8S_DIR}"
K8S_BIN_DIR="${K8S_BIN_DIR}"

#Proxy info
ZETA_PROXY="$ZETA_PROXY"
ZETA_NOPROXY="$ZETA_NOPROXY"

DNS_UPSTREAM="$DNS_UPSTREAM"
DNS_RESOLVERS="$DNS_RESOLVERS"
DNS_SEARCH="$DNS_SEARCH"
CLUSTER_DNS_IP="${CLUSTER_DNS_IP}"
CLUSTER_DOMAIN="${CLUSTER_DOMAIN}"
REVERSE_CIDRS="${REVERSE_CIDRS}"
#Cluster Mount Points
CLUSTERBASE="$CLUSTERBASE"
CLUSTERNAME="$CLUSTERNAME"
CLUSTERMOUNT="$CLUSTERMOUNT"

CNI_CONF_DIR="$CNI_CONF_DIR"
CNI_BIN_DIR="$CNI_BIN_DIR"

K8S_CNI_PROV="$K8S_CNI_PROV"
K8S_CRI_PROV="$K8S_CRI_PROV"
. "\$_GO_USE_MODULES" \$K8S_CNI_PROV
. "\$_GO_USE_MODULES" \$K8S_CRI_PROV


K8S_LOCKED="1"

EOP


}
_k8screateconf "$@"
