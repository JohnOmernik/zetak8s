#!/bin/bash
#
# libazureplatform - Library scripts to define out functions for azure
#
# plat_install - install the command line tools for the platform


DEFAULT_PLAT_USERS="ubuntu"
DEFAULT_PLAT_NETWORK="eth0"
DEFAULT_PLAT_CMD="az"
DEFAULT_PLAT_VER="--help"
DEFAULT_INIT_MASTER_NUM_NODES="3"
DEFAULT_INIT_WORKER_NUM_NODES="6"
DEFAULT_INIT_MASTER_OS_SIZE="100"
DEFAULT_INIT_WORKER_OS_SIZE="750"
DEFAULT_INIT_DATA_SIZE="64"
DEFAULT_INIT_NUM_DATA_VOL="3"

DEFAULT_INIT_SUPPORT_SPOT="N"
DEFAULT_INIT_RESOURCE_GROUP="ZetaRG"
DEFAULT_INIT_INST_MASTER_TYPE="D4s_v3"
DEFAULT_INIT_TEMP_MASTER_PRICE="0"     # 0.384 Full Price
DEFAULT_INIT_INST_WORKER_TYPE="DS5_v2"
DEFAULT_INIT_TEMP_WORKER_PRICE="0"     # 0.768 Full Price
DEFAULT_INIT_SEC_GROUP="ZetaSec"
DEFAULT_INIT_ZONE="ANY"
DEFAULT_INIT_REGION="westus2"
DEFAULT_INIT_IMG="Canonical:UbuntuServer:18.10:18.10.201901220" # Ubuntu 18.04


DEFAULT_INIT_NET_NAME="ZetaNet"
DEFAULT_INIT_NET_IP_RANGE="10.0.0.0/16"
DEFAULT_INIT_NET_SUBNET_NAME="ZetaHosts"
DEFAULT_INIT_NET_SUBNET_RANGE="10.0.1.0/24"

DEFAULT_INIT_AVAIL_GROUP="ZetaAvail"

DEFAULT_DNS_UPSTREAM="127.0.0.53"



####

function plat_install(){
    echo "--------------------------------------------"
    echo "az command not found, attempting to install"
    echo "--------------------------------------------"
    echo ""
    echo "Installing Prereqs (Ubuntu Only at this time)"
    echo ""
    sleep 4
    sudo apt-get install apt-transport-https lsb-release software-properties-common dirmngr -y
    echo ""
    AZ_REPO=$(lsb_release -cs)
    echo "Updating Repo Lists"
    echo ""
    sleep 1
    echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" |sudo tee /etc/apt/sources.list.d/azure-cli.list
    echo "Adding Microsoft Key"
    echo ""
    sleep 1
    sudo apt-key --keyring /etc/apt/trusted.gpg.d/Microsoft.gpg adv --keyserver packages.microsoft.com --recv-keys BC528686B50D79E339D3721CEB3E94ADBE1229CF
    echo "Updating apt"
    sleep 2
    sudo apt-get update
    echo ""
    echo "Installing Azure CLI"
    echo ""
    sudo apt-get install azure-cli

    $PLAT_CMD $PLAT_VER
    if [ "$?" != "0" ]; then
        echo "We were unable to get the platform command $PLAT_CMD installed.  Please manually install before proceeding. Also ensure it's in the path correctly, or update the PLAT_CMD to be a absoluate path"
    else
        echo "Platform installed correctly!"
        echo "However, before you use az to build a zeta cluster you will have to provide login information to it manually using az login"
        echo ""
    fi

}

function set_region(){
    local MYREGION=$1
    echo "Setting region doesn nothing yet in azure"
}

function start_nodes(){

    # First Check to see if the Resource group already exists

    CHKGRP=$($PLAT_CMD group list|jq -r '.[].name'|grep "${INIT_RESOURCE_GROUP}")
    if [ "$CHKGRP" == "" ]; then
        echo "Resource group not found... creating"
        GRP=$($PLAT_CMD group create --name $INIT_RESOURCE_GROUP --location $INIT_REGION)
        if [ "$?" != "0" ]; then
            echo "Resource group creation failed, perhaps you need to login?"
            echo ""
            echo "$GRP"
            exit 1
        else
            echo "Group created successfully!"
            echo "$GRP"
        fi
    else
        echo "Resource Group $INIT_RESOURCE_GROUP already exists: not creating"
    fi

    # Next check to see if the Network exists

    CHKNET=$($PLAT_CMD network vnet list|jq -r '.[].name'|grep "${INIT_NET_NAME}")
    if [ "$CHKNET" == "" ]; then
        echo "Network not found... creating"
        NET=$($PLAT_CMD network vnet create --resource-group $INIT_RESOURCE_GROUP --name $INIT_NET_NAME --address-prefix $INIT_NET_IP_RANGE --subnet-name $INIT_NET_SUBNET_NAME --subnet-prefix $INIT_NET_SUBNET_RANGE)
        if [ "$?" != "0" ]; then
            echo "Network Creation failed, perhaps you need to login"
            echo ""
            echo "$NET"
            exit 1
        else
            echo "Network Created Successfully"
            echo "$NET"
        fi
    else
        echo "Network already exists, not creating... I hope the subnets line up for you :) "
    fi

    # Next Check if the Security group exists
    CHKSEC=$($PLAT_CMD network nsg list|jq -r '.[].name'|grep "${INIT_SEC_GROUP}")
    if [ "$CHKSEC" == "" ]; then
        echo "Security Group not found... Creating"
        SEC=$($PLAT_CMD network nsg create --resource-group ${INIT_RESOURCE_GROUP} --name ${INIT_SEC_GROUP})
         if [ "$?" != "0" ]; then
            echo "Network Security Group Creation failed, perhaps you need to login"
            echo ""
            echo "$SEC"
            exit 1
        else
            echo "Network Security Group Created Successfully"
            echo "$SEC"
        fi
        MYIP=$(curl -s http://whatismyip.akamai.com/)
        echo ""
        echo "Adding a rule for your IP address of $MYIP.  You may need to manually adjust later if your needs dictate"
        echo ""
        SECRULE=$($PLAT_CMD network nsg rule create --resource-group ${INIT_RESOURCE_GROUP} \
                                                    --nsg-name ${INIT_SEC_GROUP} --description "Allow all from base IP" \
                                                    --name "baseip" --priority 100 --access Allow --protocol '*' \
                                                    --source-address-prefix "$MYIP" --source-port-ranges '*' \
                                                    --destination-port-ranges '*' --destination-address-prefixes '*')
        if [ "$?" != "0" ]; then
            echo "Rule didn't really create, you may have a problem, or not... check it out...not exiting"
            echo ""
            echo "$SECRULE"
        else
            echo "Rule probably worked"
            echo ""
            echo "$SECRULE"
        fi
    else
        echo "Network Security Group already exists, I hope you have the rules correct! :)"
    fi

    # Next Check and see if a Availability Group exists, if not create it
    AVAILCHK=$($PLAT_CMD vm availability-set list|jq -r '.[].name'|grep "${INIT_AVAIL_GROUP}")
    if [ "$AVAILCHK" == "" ]; then
        echo "Did not find Availibility Set $INIT_AVAIL_GROUP - Creating"
        AVAIL=$($PLAT_CMD vm availability-set create --resource-group $INIT_RESOURCE_GROUP --name $INIT_AVAIL_GROUP)
        if [ "$?" != "0" ]; then
            echo ""
            echo "Availability Set couldn't be created, I guess good luck? :)"
            echo ""
            echo "$AVAIL"
        else
            echo "Availability Set Created!"
            echo ""
            echo "$AVAIL"
        fi
    else
        echo "Availability Set $INIT_AVAIL_GROUP already exists - not creating, but not exiting either, hope things are peachy"
    fi


}

function start_node(){
    local RESOURCE_GROUP=$1
    local NET_NAME=$2
    local SUBNET_NAME=$3
    local SEC_GROUP=$4
    local AVAIL_GROUP=$5
    local SRV_NAME=$6
    local IMG_NAME=$7
    local VM_SIZE=$8
    local SSH_KEYFILE=$9
    local ADMIN_USERNAME=${10}
    local OS_SIZE=${11}

    echo ""
    echo "----------------------"
    echo "Adding Node: $SRV_NAME"
    echo ""
    IP_NAME="${SRV_NAME}_ip"
    NIC_NAME="${SRV_NAME}_nic"
    VM_NAME="${SRV_NAME}"

    # Create the Public IP Address
    IPCHK=$($PLAT_CMD network public-ip list|jq -r '.[].name'|grep "${IP_NAME}")
    if [ "$IPCHK" == "" ]; then
        echo "Adding Public IP: $IP_NAME"
        IP=$($PLAT_CMD network public-ip create --resource-group $INIT_RESOURCE_GROUP --name ${IP_NAME} --dns-name ${SRV_NAME})
        if [ "$?" != "0" ]; then
            echo ""
            echo "IP not created - Good luck"
            echo ""
            echo "$IP"
        else
            echo ""
            echo "IP Created"
            echo ""
            echo "$IP"
        fi
    else
        echo "So the IP named $IP_NAME exists.. not sure what to do here..."
    fi
    # Create the virtual NIC
    NICCHK=$($PLAT_CMD network nic list|jq -r '.[].name'|grep "${NIC_NAME}")
    if [ "$NICCHK" == "" ]; then
        echo "Creating NIC $NIC_NAME for vm"
        NIC=$($PLAT_CMD network nic create --resource-group $INIT_RESOURCE_GROUP --name $NIC_NAME \
                                           --vnet-name $NET_NAME --subnet $SUBNET_NAME --public-ip-address $IP_NAME --network-security-group $SEC_GROUP)
        if [ "$?" != "0" ]; then
            echo ""
            echo "Virtual NIC Creation Error - Good luck"
            echo ""
            echo "$NIC"
        else
            echo ""
            echo "NIC Created"
            echo ""
            echo "$NIC"
        fi
    else
        echo "So the Virtual NIC $NIC_NAME alreay exists, are you ok?"
    fi
    # Create the VM
    VMCHK=$($PLAT_CMD vm list|jq -r '.[].name'|grep "${VM_NAME}")
    if [ "$VMCHK" == "" ]; then
        echo "Creating VM $VM_NAME"
        VM=$($PLAT_CMD vm create --name $VM_NAME --resource-group $INIT_RESOURCE_GROUP --location $INIT_REGION --availability-set $AVAIL_GROUP \
                                 --nics $NIC_NAME --image $IMG_NAME --admin-username $ADMIN_USERNAME --size $VM_SIZE
                                 --ssh-key-value $(cat $INIT_PUB_KEY_LOC) --os-disk-size-gb $OS_SIZE

            )
    else
        echo "VM Name $VM_NAME seems to exist.... but do you exist?"
    fi
}


function term_nodes(){
    echo "Goodbye Nodes"

}

###########################################


    
# Delete Network LB

function delete_network_lb(){
    local LB_ARN=$1
    local RESULT=$2
    DELETE_LB_RESULT=$(${PLAT_CMD} elbv2 delete-load-balancer --load-balancer-arn $LB_ARN)
    if [ "$?" == "0" ]; then
        MYRESULT="0"
    else
        echo ""
        echo "$DELETE_LB_RESULT"
        echo ""
        MYRESULT="1"
    fi
    eval $RESULT="'$MYRESULT'"
}

# Delete Network LB Target Group

function delete_network_lb_tg(){
    local TG_ARN=$1
    local RESULT=$2
    DELETE_LB_TG_RESULT=$(${PLAT_CMD} elbv2 delete-target-group --target-group-arn $TG_ARN)
    if [ "$?" == "0" ]; then
        MYRESULT="0"
    else
        echo ""
        echo "$DELETE_LB_TG_RESULT"
        echo ""
        MYRESULT="1"
    fi
    eval $RESULT="'$MYRESULT'"
}

# Create LB Listener


function create_network_lb_listener(){
    local LB_ARN=$1
    local LB_PROT=$2
    local LB_PORT=$3
    local TG_ARN=$4
    local LB_LIST_ARN=$5
    local RESULT=$6

    echo "Registering Listener for LB $LB_ARN on $LB_PROT - $LB_PORT for Target Group $TG_ARN"
    CREATE_LB_LISTENER_RESULTS=$(${PLAT_CMD} elbv2 create-listener --load-balancer-arn $LB_ARN --protocol ${LB_PROT} --port ${LB_PORT}  --default-actions Type=forward,TargetGroupArn=$TG_ARN)
    if [ "$?" == "0" ]; then
        MYRESULT="0"
        LISTENERARN=$(echo "$CREATE_LB_LISTENER_RESULTS"|jq -r ".Listeners[]|.ListenerArn")
        eval $LB_LIST_ARN="'$LISTENERARN'"
    else
        echo ""
        echo "$CREATE_LB_LISTENER_RESULTS"
        echo ""
        MYRESULT="1"
    fi
    eval $RESULT="'$MYRESULT'"


}


# Register Targets in Target Group

function register_lb_targets(){
    local TG_ARN=$1
    local TG_INSTS=$2
    local RESULT=$3

    echo ""
    echo "Registering targets $TG_INSTS in Target Group $TG_ARN"
    CREATE_TG_INSTS_RESULTS=$(${PLAT_CMD} elbv2 register-targets --target-group-arn $TG_ARN --targets $TG_INSTS)
    if [ "$?" == "0" ]; then
        MYRESULT="0"
    else
        echo ""
        echo  "$CREATE_TG_INSTS_RESULTS"
        echo ""
        MYRESULT="1"
    fi
    eval $RESULT="'$MYRESULT'"

}


# Create Target Groups
function create_network_lb_targetgroup(){
    local LB_NAME=$1
    local LB_VPC=$2
    local LB_PROT=$3
    local LB_PORT=$4
    local TG_ARN=$5
    local RESULT=$6


 # Create a Target group
    echo "Creating Target group for ${LB_NAME}-targets protocol: $LB_PROT port $LB_PORT on VPC $LB_VPC"
    CREATE_TG_RESULTS=$(${PLAT_CMD} elbv2 create-target-group --name $LB_NAME-targets --protocol $LB_PROT --port $LB_PORT --vpc-id $LB_VPC)
    if [ "$?" == "0" ]; then
        MYRESULT="0"
        TGARN=$(echo "$CREATE_TG_RESULTS"|jq -r ".TargetGroups[]|.TargetGroupArn")
    else
        echo ""
        echo "$CREATE_TG_RESULTS"
        echo ""
        MYRESULT="1"
    fi
    eval $TG_ARN="'$TGARN'"
    eval $RESULT="'$MYRESULT'"


}
function create_network_lb(){
    local LB_NAME=$1
    local LB_SNID=$2
    local LB_ARN=$3
    local LB_DNS=$4
    local LB_VPC=$5
    local RESULT=$6
    echo "Creating LB $LB_NAME in subnet $SNID"
    CREATE_LB_RESULTS=$(${PLAT_CMD} elbv2 create-load-balancer --name $LB_NAME --type network --subnets $LB_SNID)
    if [ "$?" == "0" ]; then
        MYRESULT="0"
        LB_RES=$(echo "$CREATE_LB_RESULTS"|jq -r ".LoadBalancers[]|.LoadBalancerArn + \" \" + .DNSName + \" \" + .VpcId")
        LBARN=$(echo "$LB_RES"|cut -d" " -f1)
        LBDNS=$(echo "$LB_RES"|cut -d" " -f2)
        LBVPC=$(echo "$LB_RES"|cut -d" " -f3)
        eval $LB_ARN="'$LBARN'"
        eval $LB_DNS="'$LBDNS'"
        eval $LB_VPC="'$LBVPC'"

    else
        echo "Error"
        echo "$CREATE_LB_RESULTS"
        echo ""
        MYRESULT="1"
    fi
    eval $RESULT="'$MYRESULT'"
}
#    aws elbv2 create-load-balancer --name funtime --type network --subnets subnet-a6281ce0
# use DNS Name for Certificate
#{
#    "LoadBalancers": [
#        {
#            "State": {
#                "Code": "provisioning"
#            },
#            "LoadBalancerArn": "arn:aws:elasticloadbalancing:us-west-2:793246819526:loadbalancer/net/funtime/4e0a1c01ddcc8d10",
#            "CanonicalHostedZoneId": "Z18D5FSROUN65G",
#            "IpAddressType": "ipv4",
#            "LoadBalancerName": "funtime",
#            "Scheme": "internet-facing",
#            "VpcId": "vpc-ce58bbab",
#            "DNSName": "funtime-4e0a1c01ddcc8d10.elb.us-west-2.amazonaws.com",
#            "Type": "network",
#            "AvailabilityZones": [
#                {
#                    "ZoneName": "us-west-2c",
#                    "SubnetId": "subnet-a6281ce0"
#                }
#            ],
#            "CreatedTime": "2018-04-29T21:10:29.040Z"
#        }
#    ]
#}


function test_plat(){
    echo "Hey it looks like the Azure libazureplatform has been imported correctly!"
}


function ret_init_inst(){
    local INSTTYPE=$1
    local RESULT=$2

    if [ -f ./bin/${INSTTYPE}_init_output.json ]; then
        INST_OUT=$(cat ./bin/${INSTTYPE}_init_output.json)
        SPOT_INSTS=""
        for X in $(echo "$INST_OUT"|jq  -r ".SpotInstanceRequests[] | .SpotInstanceRequestId"); do
            if [ "$SPOT_INSTS" == "" ]; then
                SPOT_INSTS="$X"
            else
                SPOT_INSTS="$SPOT_INSTS $X"
            fi
        done
    else
        SPOT_INSTS=""
    fi
    eval $RESULT="'$SPOT_INSTS'"
}


function ret_instance_data_by_internal_ip(){
    local IP=$1
    local IID=$2
    local SID=$3
    INSTS=$(${PLAT_CMD} ec2 describe-instances)
    INST_DATA=$(echo "$INSTS"|jq -r ".Reservations[]|.Instances[]|.InstanceId + \"~\" + .SpotInstanceRequestId + \"~\" + .PrivateIpAddress + \"~\" + .PublicIpAddress + \"~\" + .SubnetId")
    OUTSUB=""
    OUTINST=""
    for INST in $INST_DATA; do
        INST_ID=$(echo "$INST"|cut -d"~" -f1)
        INTERNAL_IP=$(echo "$INST"|cut -d"~" -f3)
        EXTERNAL_IP=$(echo "$INST"|cut -d"~" -f4)
        SUB_ID=$(echo "$INST"|cut -d"~" -f5)
        if [ "$IP" == "$INTERNAL_IP" ]; then
            OUTSUB="$SUB_ID"
            OUTINST="$INST_ID"
        fi
    done
    eval $SID="'$OUTSUB'"
    eval $IID="'$OUTINST'"
}

function ret_init_ips() {
    local RESULT=$1
    local SPOT_INSTS=$2
    local NOOUTPUT=$3


    INSTS=$(${PLAT_CMD} ec2 describe-instances)
    INST_DATA=$(echo "$INSTS"|jq -r ".Reservations[]|.Instances[]|.InstanceId + \" \" + .SpotInstanceRequestId + \" \" + .PrivateIpAddress + \" \" + .PublicIpAddress")

        #Nodes are ; sep, instid,spotid,intip,extip,hname;instid,spotid,initip,extip,hname
    if [ "$SPOT_INSTS" != "" ]; then
        INST_STRING=""
        for SPOT_ID in $SPOT_INSTS; do
            IDATA=$(echo "$INST_DATA"|grep "$SPOT_ID")
            INST_ID=$(echo "$IDATA"|cut -d" " -f1)
            INTERNAL_IP=$(echo "$IDATA"|cut -d" " -f3)
            EXTERNAL_IP=$(echo "$IDATA"|cut -d" " -f4)
            HNAME_TMP=$(echo -n "$INTERNAL_IP"|sed "s/\./-/g")
            HNAME="ip-${HNAME_TMP}"


            if [ "$NOOUTPUT" != "1" ]; then
                echo ""
                echo "Looking for Spot Inst: $SPOT_ID"

                echo "Found Instance ID: $INST_ID"
                echo "IPs: Internal: $INTERNAL_IP - External: $EXTERNAL_IP - Hostname: $HNAME"
                echo ""
            fi
            if [ "$INST_STRING" == "" ]; then
                INST_STRING="${INST_ID},${SPOT_ID},${INTERNAL_IP},${EXTERNAL_IP},${HNAME}"
            else
                INST_STRING="${INST_STRING};${INST_ID},${SPOT_ID},${INTERNAL_IP},${EXTERNAL_IP},${HNAME}"
            fi
        done
    else
        for IDATA in $INST_DATA; do
            INST_ID=$(echo "$IDATA"|cut -d" " -f1)
            INTERNAL_IP=$(echo "$IDATA"|cut -d" " -f3)
            EXTERNAL_IP=$(echo "$IDATA"|cut -d" " -f4)
            HNAME_TMP=$(echo -n "$INTERNAL_IP"|sed "s/\./-/g")
            HNAME="ip-${HNAME_TMP}"

            if [ "$NOOUTPUT" != "1" ]; then
                echo ""
                echo "Found Instance ID: $INST_ID"
                echo "IPs: Internal: $INTERNAL_IP - External: $EXTERNAL_IP"
                echo ""
            fi
            if [ "$INST_STRING" == "" ]; then
                INST_STRING="${INST_ID},na,${INTERNAL_IP},${EXTERNAL_IP},${HNAME}"
            else
                INST_STRING="${INST_STRING};${INST_ID},na,${INTERNAL_IP},${EXTERNAL_IP},${HNAME}"
            fi
        done
    fi

    eval $RESULT="'$INST_STRING'"


}

